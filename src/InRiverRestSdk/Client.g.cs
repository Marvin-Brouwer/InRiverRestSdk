// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

#nullable enable
namespace InRiverRestSdk
{
    /// <summary>
    /// Get channel id's for entity id
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface IChannelApi
    {
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels")]
        Task<ICollection<ChannelSummaryModel>> GetChannelsForEntityId([Query] int? forEntityId = default, [Query] bool? includeChannels = default, [Query] bool? includePublications = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/{channelId}/entitytypes")]
        Task<ICollection<string>> EntityTypes(int channelId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/{channelId}/entitylist")]
        Task<EntityListModel> GetByLinkEntityType(int channelId, [Query] string? entityTypeId = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/{channelId}/entities/{entityId}/links")]
        Task<ICollection<LinkModel>> GetByEntityType(int channelId, int entityId, [Query] string? linkDirection = default, [Query] string? linkTypeId = default);

        /// <summary>
        /// Returns all occurances of an entity in a channel
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/{channelId}/entities/{entityId}/structureentities")]
        Task<ICollection<StructureEntityModel>> GetChannelStructureEntities(int channelId, int entityId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/{channelId}/nodes")]
        Task<ICollection<string>> GetChannelNodes(int channelId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/{channelId}/nodetree")]
        Task<IDictionary<string, StructureNode>> GetChannelNodeTree(int channelId);

        /// <summary>
        /// Use the entity list to directly query data. Use the paths in the content array to traverse the channel structure.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/content/{path}")]
        Task<ChannelPathContentModel> ChannelContent(string path, [Query] string? entityTypeIds = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/channels/queue")]
        Task<ICollection<ChannelMessageModel>> GetChannelMessagesAsync();
    }

    /// <summary>
    /// Returns various types of entity data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface IEntityApi
    {
        /// <summary>
        /// Fetch data for a list of entity id's and specify what data to include (objects).
        /// 
        /// Specify what objects to include in a comma separated list. You may fetch different object sets for entities, inbound links, outbound links. Supply a "linkEntityObjects" string in the inbound or outbound object to include link entity data in the response.
        /// 
        /// Link types may be specified for both inbound and outbound using linkTypeIds (a comma separated list of link type id's). If linkTypeIds is omitted no filtering will be applied.
        /// 
        /// The inbound and outbound relations are only fetched from the root entity.
        /// 
        /// Field data may be filtered by suppling a comma separated list as fieldTypeIds. The filter will be applied on all entities and linked entities regardless of entity type.
        /// 
        /// Available objects
        /// -----
        /// EntitySummary<br />
        /// FieldsSummary<br />
        /// FieldValues<br />
        /// SpecificationSummary<br />
        /// SpecificationValues<br />
        /// Media<br />
        /// MediaDetails<br />
        /// 
        /// Examples:<br />
        /// "objects": "EntitySummary,Media" <br />
        /// "linkEntityObjects": "FieldValues" (applicable to inbound and outbound links only)<br />
        /// 
        /// Always request as few objects as possible as this will reduce the response time.
        /// 
        /// Limit: 1000 entity ids per request.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.1/entitiesfetchdata")]
        Task<ICollection<EntityDataModel>> FetchData([Body] FetchObjectsModel? body = default);

        /// <summary>
        /// Insert or update entities and links. There is no need to know entity id's or link id's on the client side.
        /// Entities are identified using any combination of field values
        /// 
        /// If the entity already exists it will be updated with the supplied data.
        /// If the entity doesn't exist it will be inserted with the supplied data.
        /// 
        /// This endpoint accepts an **array** of entity data parameters.
        /// 
        /// ### Parameters:
        /// 
        /// entityTypeId:
        /// - The type of entity to insert or update
        /// 
        /// keyFieldTypeIds:
        /// - An array of field type id's making up the key to locate existing entities for updates
        /// - Use multiple field type id's to define a composite key
        /// - The actual key field values must exist in the *fieldValues* array
        /// 
        /// fieldValues:
        /// - Each field value is defined as an array of two elements, FieldTypeId and value, such as __["MyFieldTypeId", "My value"]__
        /// - Must at least contain the field types used as key in keyFieldTypeIds
        /// - An array of field values being updated
        /// 
        /// fieldSetOptions:
        /// - Omit *fieldSetOptions* or set to null to leave existing field set unchanged
        /// - Set *fieldSetId* to null to remove the field set
        /// 
        /// specificationData:
        /// - Omit *specificationData* or set to null to keep existing specification data intact
        /// - Set *specfication* AND *specificationValues* to null to delete the specification
        /// - Set *specfication* to assign a specification template. This can be done in three ways:
        /// - Entity Id of the specification template (must be set as integer value)
        /// - The name of the specification template (as string value). The display name field type for Specification will be used for lookup. Note that this field type must have the unique flag enabled.
        /// - Specify a 2 element array defining field type id and value: __["FieldTypeId", "My value"]__
        /// - Field type must have the unique flag enabled
        /// - Each value in *specificationValues* is defined as an array of two elements, SpecificationFieldTypeId and value, such as __["MyFieldTypeId", "My value"]__
        /// 
        /// segment:
        /// - If *segment* is omitted in a multi segment environment, the entity will be created in a segment the user has access to. It's recommended to omit segmentId at all times if the enviroment doesn't have multiple segments.
        /// - The segment may be set in two ways:
        /// - Segment Id (must be set as integer value)
        /// - Segment Name (must be set as string value)
        /// 
        /// links:
        /// - Omit *links* or set to null to leave existing links unchanged
        /// - *linkInsertAction* defines whether new links are active or inactive. Omitting *linkInsertAction* equals "Activate".
        /// - Possible values:
        /// - *Activate* (default value - activate new links)
        /// - *Inactivate* (inactivate new links)
        /// - *linkUpdateAction* defines whether updated links are active, inactive or unchanged. Omitting *linkInsertAction* equals "None".
        /// - Possible values:
        /// - *None* (default value - no change to existing links)
        /// - *Activate* (activate existing links)
        /// - *Inactivate* (inactivate existing links)
        /// - *staleLinkAction* defines how to handle existing (stale) links not present in the submitted links array. Omitting *staleLinkAction* equals "None".
        /// - Possible values:
        /// - *None* (default value - stale links will not be modified)
        /// - *Inactivate* (inactivate stale links)
        /// - *Unlink* (stale links will be removed)
        /// - *UnlinkAndDeleteOrphans*
        /// - Same as "Unlink" but also deletes the linked entity in case it will be left without any links at all (orphaned)
        /// - Use with caution since deleted entities can't be restored
        /// 
        /// 
        /// ### Response object:
        /// 
        /// errors:
        /// - Array of accumulated errors for the entire upsert operation
        /// - Errors are defined as [path, errorCode, errorMessage]
        /// 
        /// errorCount:
        /// - The length of the errors array
        /// 
        /// insertedEntities, updatedEntities, deletedEntities:
        /// - Each element is defined as [path, entityId]
        /// - Note that deletedEntities will always be empty unless *UnlinkAndDeleteOrphans* is explicitly enabled
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/entitiesupsert")]
        Task<UpsertResponseModel> Upsert([Body] IEnumerable<EntityUpsertDataModel>? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/summary")]
        Task<EntitySummaryModel> GetEntitySummary(int entityId);

        [Delete("/api/v1.0.0/entities/{entityId}")]
        Task DeleteEntity(int entityId);

        /// <summary>
        /// If segmentId is omitted in a multi segment environment, the entity will be created in a segment the user has access
        /// to. It's recommended to omit segmentId at all times if the enviroment doesn't have multiple segments.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.1/entitiescreatenew")]
        Task<EntitySummaryModel> CreateEntity([Body] EntityCreationModel? body = default);

        /// <summary>
        /// The fieldValues array will contain all fields required to create an entity (usually all mandatory and unique
        /// fields).
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entitiesgetempty")]
        Task<EntityCreationModel> GetEmptyEntity([Query] string? entityTypeId = default, [Query] string? fieldSetId = default, [Query] bool? allFields = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/entitiesmapuniquevalues")]
        Task<IDictionary<string, int>> MapUniqueValues([Body] MapUniqueValuesModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/completenessdetails")]
        Task<CompletenessDetailsModel> CompletenessDetails(int entityId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/summary/fields")]
        Task<ICollection<FieldSummaryModel>> GetFields(int entityId, [Query] string? fieldTypeIds = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/fieldvalues")]
        Task<ICollection<FieldValueModel>> GetFieldValues(int entityId, [Query] string? fieldTypeIds = default);

        /// <summary>
        /// The list may be an subset of available field values
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/entities/{entityId}/fieldvalues")]
        Task<ICollection<FieldValueModel>> SetFieldValues(int entityId, [Body] IEnumerable<FieldValueModel>? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/fieldvalues/{fieldTypeId}/revisions")]
        Task<ICollection<FieldRevisionModel>> FieldHistory(int entityId, string fieldTypeId);

        /// <summary>
        /// Set fieldSetId to null to remove the field set
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/entities/{entityId}/fieldset")]
        Task<EntitySummaryModel> SetFieldSet(int entityId, [Body] SetFieldSetModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/summary/specification")]
        Task<ICollection<SpecificationValueSummaryModel>> GetSpecificationSummary(int entityId, [Query] string? specificationFieldTypeIds = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/specificationvalues")]
        Task<ICollection<SpecificationValueModel>> GetSpecificationValues(int entityId, [Query] string? specificationFieldTypeIds = default, [Query] bool? mandatoryOnly = default);

        /// <summary>
        /// The list may be an subset of available specification field values
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/entities/{entityId}/specificationvalues")]
        Task<ICollection<SpecificationValueModel>> UpdateSpecificationValues(int entityId, [Body] IEnumerable<SpecificationValueModel>? body = default);

        /// <summary>
        /// Set SpecificationId to null for removing specification template
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/entities/{entityId}/specificationtemplate")]
        Task<EntitySummaryModel> SetSpecificationTemplate(int entityId, [Body] SetSpecificationTemplateModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/entities/{entityId}/segment")]
        Task<EntitySummaryModel> SetSegment(int entityId, [Body] SetSegmentModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/links")]
        Task<ICollection<LinkModel>> GetLinksForEntity(int entityId, [Query] string? linkDirection = default, [Query] string? linkTypeId = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/linksandfields")]
        Task<EntityBundleModel> GetEntityBundle(int entityId, [Query] string? fieldTypeIds = default, [Query] string? linkDirection = default, [Query] string? linkTypeId = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/media")]
        Task<ICollection<string>> GetAllMedia(int entityId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/mediadetails")]
        Task<ICollection<MediaInfoModel>> GetMediaDetails(int entityId);

        /// <summary>
        /// Upload base64 encoded file data.
        /// Enter entityId for the entity you want to link the created resource entity to.
        /// Example: You want to create a resource and then link it to a Product. You add the entityId for the product entity
        /// that you would like to link the resource entity to.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/entities/{entityId}/mediauploadbase64")]
        Task<MediaInfoModel> UploadBase64File(int entityId, [Body] Base64FileModel? body = default);

        /// <summary>
        /// Enter entityId for the entity you want to link the created resource entity to.
        /// Example: You want to create a resource and then link it to a Product. You add the entityId for the product entity
        /// that you would like to link the resource entity to.
        /// Note: If overrideUrlFileName is omitted, the filename will equal the one supplied in the url. Set
        /// overrideUrlFileName to specifiy a file name.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/entities/{entityId}/mediauploadfromurl")]
        Task<MediaInfoModel> UploadMediaFromUrl(int entityId, [Body] UrlFileModel? body = default);

        /// <summary>
        /// Enter entityId for the entity you want to link the created resource entity to.
        /// Example:
        /// You want to create a resource and then link it to a Product. You add the entityId for the product entity that you
        /// would like to link the resource entity to.
        /// Original external file URL that is added with this REST endpoint
        /// https://yourexternalresourceservice.com/imagename.jpg
        /// Your external image service then need to support the standard inRiver image configuration formats(Original,
        /// Preview, Thumbnail and SmallThumbnail) as a suffix on the URL that you uploaded or have a proxy that redirect to
        /// the right image format, else the inRiver web portal will not work correct.
        /// https://yourexternalresourceservice.com/imagename.jpg/Original <br />
        /// https://yourexternalresourceservice.com/imagename.jpg/Preview <br />
        /// https://yourexternalresourceservice.com/imagename.jpg/Thumbnail <br />
        /// https://yourexternalresourceservice.com/imagename.jpg/SmallThumbnail <br />
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/entities/{entityId}/mediaaddexternalurl")]
        Task<MediaInfoModel> AddExternalUrl(int entityId, [Body] ExeternalUrlFileModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/{entityId}/comments")]
        Task<ICollection<CommentModel>> Comments(int entityId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/entities/{entityId}/comments")]
        Task<CommentModel> CreateComment(int entityId, [Body] CommentModel? body = default);

        [Delete("/api/v1.0.0/entities/{entityId}/comments/{commentId}")]
        Task DeleteComment(int entityId, int commentId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/starred")]
        Task<ICollection<int>> StarredEntities();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/entities/starred")]
        Task<ICollection<int>> UpdateStarredEntities([Body] IEnumerable<int>? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/entities/segments")]
        Task<ICollection<Segment>> GetAllSegments();
    }

    /// <summary>
    /// Return a list of all extensions that have been added to the environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface IExtensionApi
    {
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions")]
        Task<ICollection<ExtensionModel>> GetAllExtensions();

        /// <summary>
        /// **extensionId**: The Unique ID of your new extension. The basic restrictions are:
        /// * Maximum length 50 characters
        /// 
        /// Best practice
        /// * Use character set A to Z, a to z, 0-9.
        /// * Characters such as spaces, underscores, hyphens, etc. should not be used.
        /// 
        /// **extensionType**: State the type of extension you have created. Valid values:
        /// * ChannelListener
        /// * CompletenessCriteria
        /// * CompletenessListener
        /// * CustomValueList
        /// * CVLListener
        /// * EntityListener
        /// * InboundDataExtension
        /// * InboundFileExtension
        /// * LinkListener
        /// * PrintFormatter
        /// * PrintImageCustomAttribute
        /// * PrintTextCustomAttribute
        /// * ScheduledExtension
        /// * ServerExtension
        /// * SpecificationListener
        /// 
        /// **assemblyName**: Write the full name of the assembly that contains your extension's class.
        /// 
        /// **packageId**: You need to upload a package /packages:uploadbase64 before a new extension can be created. It will also return a package ID. Or fetch the package ID via endpoint /packages.
        /// 
        /// **assemblyType**: The type including the namespace of the extension's class. It should be in the format "namespace"."class name". An example would be MyCompany.inRiver.Connectors.Outbound.EpiServerChannelListener for the EpiServerChannelListener
        /// in the MyCompany.inRiver.Connectors.Outbound namespace. This field is case sensitive. Casing must match your namespace and class exactly.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions")]
        Task<ExtensionModel> AddExtension([Body] ExtensionCreationModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}")]
        Task<ExtensionModel> GetExtension(string extensionId);

        [Delete("/api/v1.0.0/extensions/{extensionId}")]
        Task DeleteExtension(string extensionId);

        /// <summary>
        /// * InboundDataExtension or InboundFileExtension.
        /// </summary>
        [Put("/api/v1.0.0/extensions/{extensionId}/apikey")]
        Task SetExtensionApiKet(string extensionId, [Body] ExtensionApiKeyModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}/settings")]
        Task<ICollection<ExtensionSettingModel>> GetExtensionSettings(string extensionId);

        /// <summary>
        /// Once you have added new settings you need to call the endpoint settings:reload to make the new settings available in Context.Settings in your extension.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/extensions/{extensionId}/settings")]
        Task<ExtensionSettingModel> AddOrUpdateExtensionSetting(string extensionId, [Body] ExtensionSettingModel? body = default);

        /// <summary>
        /// The statistics are refreshed at 60 second intervals.
        /// 
        /// Calling the endpoint more frequently than this will simply return the same measurements, and may have a negative effect on performance.
        /// Limit the number of calls to what is appropriate for your purpose, and consider whether a longer polling of the statistics is sufficient.
        /// 
        /// Statistics may be requested for the following extension types:
        /// 
        /// * EntityListener <br />
        /// * ChannelListener <br />
        /// * CompletenessListener <br />
        /// * CVLListener <br />
        /// * LinkListener <br />
        /// * SegmentationListener <br />
        /// * SpecificationListener
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}/statistics")]
        Task<IDictionary<string, object>> GetExtensionEventStats(string extensionId);

        [Delete("/api/v1.0.0/extensions/{extensionId}/settings/{key}")]
        Task DeleteExtensionSetting(string extensionId, string key);

        /// <summary>
        /// Get extension setting by passing the extensions id (extensionId)
        /// and the setting key (key) to the api endpoint.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}/settings/{key}")]
        Task<ExtensionSettingModel> GetExtensionSetting(string extensionId, string key);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions/{extensionId}/settingsapplydefaults")]
        Task<ICollection<ExtensionSettingModel>> ApplyDefaultExtensionSettings(string extensionId);

        /// <summary>
        /// You need to reload service settings.
        /// </summary>
        [Post("/api/v1.0.0/extensions/{extensionId}/settingsreload")]
        Task ReloadSettingsForExtension(string extensionId);

        /// <summary>
        /// You also get the setting if it is paused. Please note that it is only extension of types
        /// * ChannelListener
        /// * CompletenessListener
        /// * CVLListener
        /// * EntityListener
        /// * LinkListener
        /// * SpecificationListener
        /// 
        /// that can be paused. An extension should never be paused more than a short period of time (1 hour) as all events are being queued up.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}/status")]
        Task<ExtensionStatusModel> GetExtensionStatus(string extensionId);

        /// <summary>
        /// Applicable extension types:
        /// * ChannelListener
        /// * CompletenessListener
        /// * CVLListener
        /// * EntityListener
        /// * LinkListener
        /// * SpecificationListener
        /// * SegmentationListener
        /// 
        /// May be used as a reference to determine possible filter configurations.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}/filtertypes")]
        Task<ICollection<ConnectEventFilterTypeModel>> GetAllFilterTypes(string extensionId);

        /// <summary>
        /// Applicable extension types:
        /// * ChannelListener
        /// * CompletenessListener
        /// * CVLListener
        /// * EntityListener
        /// * LinkListener
        /// * SpecificationListener
        /// * SegmentationListener
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}/filterconfigurations")]
        Task<ICollection<ConnectEventFilterConfigurationModel>> GetAllFilterConfigurations(string extensionId);

        /// <summary>
        /// Applicable extension types:
        /// * ChannelListener
        /// * CompletenessListener
        /// * CVLListener
        /// * EntityListener
        /// * LinkListener
        /// * SpecificationListener
        /// * SegmentationListener
        /// 
        /// The configuration is supplied as an array of strings representing values allowed to pass the event filter.<br />
        /// It's valid to submit a subset of filter configurations (the configurations not submitted will remain unmodified).<br />
        /// Set configuration to null to disable a filter.<br />
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/extensions/{extensionId}/filterconfigurations")]
        Task<ICollection<ConnectEventFilterConfigurationModel>> UpdateFilterConfigurations(string extensionId, [Body] IEnumerable<ConnectEventFilterConfigurationModel>? body = default);

        /// <summary>
        /// Applicable extension types:
        /// * ChannelListener
        /// * CompletenessListener
        /// * CVLListener
        /// * EntityListener
        /// * LinkListener
        /// * SpecificationListener
        /// * SegmentationListener
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/{extensionId}/filterconfigurations/{filterTypeName}")]
        Task<ConnectEventFilterConfigurationModel> GetFilterConfiguration(string extensionId, string filterTypeName);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions/{extensionId}enable")]
        Task<ExtensionStatusModel> EnableExtension(string extensionId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions/{extensionId}disable")]
        Task<ExtensionStatusModel> DisableExtension(string extensionId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions/{extensionId}resume")]
        Task<ExtensionStatusModel> ResumeExtension(string extensionId);

        /// <summary>
        /// Please note that it is only extensions of types
        /// * ChannelListener
        /// * CompletenessListener
        /// * CVLListener
        /// * EntityListener
        /// * LinkListener
        /// * SpecificationListener
        /// 
        /// that can be paused. Also note that an extension should never be paused more than a short period of time (1 hour) as all events are being queued up.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions/{extensionId}pause")]
        Task<ExtensionStatusModel> PauseExtension(string extensionId);

        /// <summary>
        /// Note you can run an enabled or disabled extension.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions/{extensionId}run")]
        Task<object> RunExtension(string extensionId);

        /// <summary>
        /// Response message is the string that you return in your implementation of the Test method in the extension.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensions/{extensionId}test")]
        Task<object> TestExtension(string extensionId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/extensions/queue")]
        Task<ICollection<ConnectMessageModel>> GetConnectMessagesAsync();

        [Delete("/api/v1.0.0/extensions/queue")]
        Task DeleteAllConnectMessages();

        [Delete("/api/v1.0.0/extensions/queue/{extensionId}")]
        Task DeleteConnectMessagesByExtensionIdInTimespan(string extensionId, [Query] System.DateTimeOffset? startDateUTC = default, [Query] System.DateTimeOffset? endDateUTC = default);

        /// <summary>
        /// If you have uploaded a new package of a current extension then you should restart the service to make sure that the new extension is loaded instead of the old extension.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/extensionmanagerrestartservice")]
        Task<object> RestartService();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/packages")]
        Task<ICollection<PackageModel>> GetAllPackages();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/packages/{packageId}")]
        Task<PackageModel> GetPackage(int packageId);

        /// <summary>
        /// Note that you need to remove the extension before you can remove the package.
        /// </summary>
        [Delete("/api/v1.0.0/packages/{packageId}")]
        Task DeletePackage(int packageId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/packages/{packageId}/content")]
        Task<Base64FileModel> GetPackageContent(int packageId);

        /// <summary>
        /// Upload base64 encoded file data.
        /// To create a package, zip all the files in your build directory including your compiled code and all referenced assemblies.
        /// The .zip file must be uploaded via endpoint /packages:uploadbase64 before a new extension can be created.
        /// Once uploaded, fetch the the package ID via endpoint /packages.
        /// Best practice is to include the version in the .zip file name.
        /// For example OutboundConnector.2.12.6.zip
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/packagesuploadbase64")]
        Task<PackageModel> UploadPackage([Body] Base64FileModel? body = default);

        /// <summary>
        /// Note that after you have uploaded a new version of a package you need to extensionmanager:restartservice to make sure the new extension is loaded instead of the old extension,
        /// or remove the extension and add it again. Best practice is to disable or pause extensions before you do an extensionmanager:restartservice to make sure you keep all messages
        /// and then enable / resume the extensions. Also note that scheduled extensions will be restarted.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/packages/{packageId}uploadandreplacebase64")]
        Task<PackageModel> UpdatePackage(int packageId, [Body] Base64FileModel? body = default);
    }

    /// <summary>
    /// Returns a link
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface ILinkApi
    {
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/links/{linkId}")]
        Task<LinkModel> GetLink(int linkId);

        [Delete("/api/v1.0.0/links/{linkId}")]
        Task DeleteLink(int linkId);

        /// <summary>
        /// Set index to 0 to add the link to first position. Set index to null to add the link to last position. Specifying
        /// the index will reorganize all link indices.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/links")]
        Task<LinkModel> CreateLink([Body] LinkModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/links/sortorder")]
        Task<ICollection<LinkModel>> UpdateLink([Body] IEnumerable<LinkModel>? body = default);
    }

    /// <summary>
    /// Add Media
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface IMediaApi
    {
        /// <summary>
        /// Upload base64 encoded file data. A resource entity will be created.
        /// If the resourceLink object is omitted a resource entity will be created without a link. If resourceLink.linkTypeId
        /// is omitted inRiver will automatically find the most suitable link type.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/mediauploadbase64")]
        Task<MediaInfoModel> UploadBase64File2([Body] Base64FileModelWithLink? body = default);

        /// <summary>
        /// Note: If overrideUrlFileName is omitted, the filename will equal the one supplied in the url. Set
        /// overrideUrlFileName to specifiy a file name.
        /// If the resourceLink object is omitted a resource entity will be created without a link. If resourceLink.linkTypeId
        /// is omitted inRiver will automatically find the most suitable link type.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/mediauploadfromurl")]
        Task<MediaInfoModel> UploadMediaFromUrl2([Body] UrlFileModelWithLink? body = default);

        /// <summary>
        /// If the resourceLink object is omitted a resource entity will be created without a link. If resourceLink.linkTypeId
        /// is omitted inRiver will automatically find the most suitable link type.
        /// Example:
        /// Original external file URL that is added with this REST endpoint
        /// https://yourexternalresourceservice.com/imagename.jpg
        /// Your external image service then need to support the standard inRiver image configuration formats(Original,
        /// Preview, Thumbnail and SmallThumbnail) as a suffix on the URL that you uploaded or have a proxy that redirect to
        /// the right image format, else the inRiver web portal will not work correct.
        /// https://yourexternalresourceservice.com/imagename.jpg/Original <br />
        /// https://yourexternalresourceservice.com/imagename.jpg/Preview <br />
        /// https://yourexternalresourceservice.com/imagename.jpg/Thumbnail <br />
        /// https://yourexternalresourceservice.com/imagename.jpg/SmallThumbnail <br />
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/mediaaddexternalurl")]
        Task<MediaInfoModel> AddExternalUrl2([Body] ExternalUrlFileModelWithLink? body = default);
    }

    /// <summary>
    /// Returns available entity types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface IModelApi
    {
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.1/model/entitytypes")]
        Task<ICollection<EntityTypeModelV2>> GetAllEntityTypesV101([Query] string? entityTypeIds = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.1/model/entitytypes")]
        Task<EntityTypeModelV2> AddEntityType([Body] EntityTypeCreationModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.1/model/entitytypes/{entityTypeId}")]
        Task<EntityTypeModelV2> GetEntityType(string entityTypeId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.1/model/entitytypes/{entityTypeId}")]
        Task<EntityTypeModelV2> UpdateEntityType(string entityTypeId, [Body] EntityTypeCreationModel? body = default);

        [Delete("/api/v1.0.1/model/entitytypes/{entityTypeId}")]
        Task DeleteEntityType(string entityTypeId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.1/model/entitytypes/{entityTypeId}/fieldtypes")]
        Task<ICollection<FieldTypeModelV2>> GetAllFieldTypesForEntityType(string entityTypeId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.1/model/entitytypes/{entityTypeId}/fieldtypes")]
        Task<ICollection<FieldTypeModelV2>> AddFieldType(string entityTypeId, [Body] FieldTypeModelV2? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.1/model/entitytypes/{entityTypeId}/fieldtypes/{fieldTypeId}")]
        Task<FieldTypeModelV2> GetFieldType(string entityTypeId, string fieldTypeId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.1/model/entitytypes/{entityTypeId}/fieldtypes/{fieldTypeId}")]
        Task<FieldTypeModelV2> UpdateFieldType(string entityTypeId, string fieldTypeId, [Body] FieldTypeModelV2? body = default);

        [Delete("/api/v1.0.1/model/entitytypes/{entityTypeId}/fieldtypes/{fieldTypeId}")]
        Task DeleteFieldType(string entityTypeId, string fieldTypeId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/languages")]
        Task<ICollection<LanguageModel>> GetAllLanguages();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/model/languages")]
        Task<LanguageModel> AddLanguage([Body] LanguageCreationModel? body = default);

        [Delete("/api/v1.0.0/model/languages/{languageCode}")]
        Task DeleteLanguage(string languageCode);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/fieldsets")]
        Task<ICollection<FieldSetModel>> GetAllFieldSets();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/model/fieldsets")]
        Task<FieldSetCreationModel> AddFieldSet([Body] FieldSetCreationModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/model/fieldsets/{fieldsetId}")]
        Task<FieldSetCreationModel> UpdateFieldSet(string fieldsetId, [Body] FieldSetCreationModel? body = default);

        [Put("/api/v1.0.0/model/fieldsets/{fieldSetId}/{fieldTypeId}")]
        Task AddFieldTypeToFieldSet(string fieldSetId, string fieldTypeId);

        [Delete("/api/v1.0.0/model/fieldsets/{fieldSetId}/{fieldTypeId}")]
        Task DeleteFieldTypeToFieldSet(string fieldSetId, string fieldTypeId);

        [Delete("/api/v1.0.0/model/fieldsets/{fieldSetId}")]
        Task DeleteFieldSet(string fieldSetId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/category")]
        Task<ICollection<CategoryModel>> GetAllCategories();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/model/category")]
        Task<CategoryModel> AddCategory([Body] CategoryModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/category/{categoryId}")]
        Task<CategoryModel> GetCategory(string categoryId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/model/category/{categoryId}")]
        Task<CategoryModel> UpdateCategory(string categoryId, [Body] CategoryModel? body = default);

        [Delete("/api/v1.0.0/model/category/{categoryId}")]
        Task DeleteCategory(string categoryId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/cvls")]
        Task<ICollection<CVLModel>> GetAllCvls();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/model/cvls")]
        Task<CVLCreationModel> AddCvl([Body] CVLCreationModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/cvls/{cvlId}")]
        Task<ICollection<CVLModel>> GetCvl(string cvlId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/model/cvls/{cvlId}")]
        Task<CVLCreationModel> UpdateCvl(string cvlId, [Body] CVLCreationModel? body = default);

        [Delete("/api/v1.0.0/model/cvls/{cvlId}")]
        Task DeleteCvl(string cvlId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/cvls/{cvlId}/values")]
        Task<ICollection<CVLValueModel>> GetAllCvlValues(string cvlId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/model/cvls/{cvlId}/values")]
        Task<CVLValueModel> CreateCvlValue(string cvlId, [Body] CVLValueModel body);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/cvls/{cvlId}/values/{key}")]
        Task<CVLValueModel> GetCvlValue(string cvlId, string key);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/model/cvls/{cvlId}/values/{key}")]
        Task<CVLValueModel> UpdateCvlValue(string cvlId, string key, [Body] CVLValueModel? body = default);

        [Delete("/api/v1.0.0/model/cvls/{cvlId}/values/{key}")]
        Task DeleteCvlValue(string cvlId, string key);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/specificationtemplates")]
        Task<ICollection<EntitySummaryModel>> GetAllSpecificationTemplates();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/specificationtemplates/{templateId}/fieldtypes")]
        Task<ICollection<SpecificationFieldTypeModel>> GetSpecificationTemplatesields(int templateId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/restrictedfields")]
        Task<ICollection<RestrictedFieldPermissionModel>> GetAllRestrictedFieldPermission();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/model/restrictedfields")]
        Task<RestrictedFieldPermissionModel> AddRestrictedFieldPermission([Body] RestrictedFieldPermissionModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/model/restrictedfields/{restrictedFieldId}")]
        Task<ICollection<RestrictedFieldPermissionModel>> GetRestrictedFieldPermission(int restrictedFieldId);

        [Delete("/api/v1.0.0/model/restrictedfields/{restrictedfieldId}")]
        Task DeleteRestrictedFieldPermission(int restrictedfieldId);

        [Delete("/api/v1.0.0/model/restrictedfieldsbyfieldtype")]
        Task DeleteRestrictedFieldPermission2([Query] string? fieldTypeId = default);
    }

    /// <summary>
    /// Search for entity id's
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface IQueryApi
    {
        /// <summary>
        /// Available system criterion types and their supported operators<br />
        /// -----
        /// <b>FieldSetId</b>: (string) Equal, NotEqual, IsEmpty, IsNotEmpty<br /><b>SegmentIds</b>: (Integer array) ContainsAny, NotContainsAny<br /><b>CreatedBy</b>: (email, string) Equal, NotEqual<br /><b>ModifiedBy</b>: (email, string) Equal, NotEqual<br /><b>Created</b>: (DateTime) Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual<br /><b>LastModified</b>: (DateTime) Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual<br /><b>EntityTypeId</b>: (string) Equal, NotEqual<br /><b>Completeness</b>: (Integer) Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual<br /><b>ChannelId</b>: (Integer) Equal<br /><b>PublicationId</b>: (Integer) Equal
        /// Operators for each field datatype in dataCriteria<br />
        /// -----
        /// <b>String</b>: Equal, NotEqual, BeginsWith, IsEmpty, IsNotEmpty, Contains<br /><b>LocaleString</b>: Equal, NotEqual, BeginsWith, IsEmpty, IsNotEmpty, Contains<br /><b>Boolean</b>: IsTrue, IsFalse, IsEmpty IsNotEmpty,<br /><b>CVL(singlevalue)</b>: Equal, NotEqual, IsEmpty IsNotEmpty,<br /><b>CVL(multivalue)</b>: ContainsAll, ContainsAny, NotContainsAll, NotContainsAny, IsEmpty IsNotEmpty,<br /><b>Date time</b>: Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, IsEmpty IsNotEmpty
        /// <br /><b>Integer and Double</b>: Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, IsEmpty, IsNotEmpty<br /><b>Xml</b>: Equal, NotEqual, BeginsWith, IsEmpty, IsNotEmpty, Contains<br /><b>File</b>: Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, IsEmpty IsNotEmpty
        /// Language
        /// -----
        /// <b>LocaleString</b> is the only data type that supports language.
        /// Link Criterion<br />
        /// -----
        /// <b>DataCriteriaOperator</b> is the logical operator to combine all the given data criteria in the list.
        /// Only "And" and "Or" operators are supported. Default value is "And". <br />
        /// -----
        /// Direction determines if the source or target entity of the link will be included in the result.<br />
        /// - If direction is "outbound", the link source entity is included in the result<br />
        /// - If direction is "inbound", the link target entity is included in the result<br />
        /// If linkCriterion.dataCriteria is omitted the search will simply check if a link exists.<br />
        /// The boolean linkExists defaults to true and may be omitted. Setting linkExists to false searches for entities
        /// without links and can't be combined with data criteria (in the link criterion).<br />
        /// Note: Keep your queries as simple as possible. More complex queries take longer time to perform.<br />
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/query")]
        Task<EntityListModel> Query([Body] QueryModel? body = default);
    }

    /// <summary>
    /// Get All Syndications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface ISyndicateApi
    {
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/syndications")]
        Task<ICollection<SyndicationModel>> Syndications();

        [Post("/api/v1.0.0/syndications/{syndicationId}run")]
        Task RunSyndicate(int syndicationId);
    }

    /// <summary>
    /// Returns available image configurations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface ISystemApi
    {
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/imageconfigurations")]
        Task<ICollection<string>> GetAllImageConfigurations();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/imageconfigurationdetails")]
        Task<ICollection<ImageConfigurationDetailsModel>> GetImageConfigurationDetails();

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/serversettings")]
        Task<IDictionary<string, string>> GetServerSettings([Query] string? settingNames = default);

        /// <summary>
        /// Requires the permission "ManageServerSettings". It returns only the settings that were updated.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/system/serversetting")]
        Task<IDictionary<string, string>> UpdateServerSetting([Body] IDictionary<string, string>? body = default);

        /// <summary>
        /// If the environment has multiple segments the user's roles for assigned segments will be combined. The /segments endpoint should be used for multi segment environments. Requires administrator role.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/roles")]
        Task<ICollection<RoleModel>> Roles([Query] string? forUsername = default);

        /// <summary>
        /// Requires administrator role.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/segments")]
        Task<ICollection<SegmentModel>> Segments([Query] string? forUsername = default);

        /// <summary>
        /// The roleNames array is expecting a list of role names, such as ["Editor", "Reader"]. The roleNames array may be set to empty or null in order to completely remove user access from the given segment. Requires administrator role.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/system/segments/{segmentId}setuserroles")]
        Task<UserRolesModel> SetUserRolesForSegment(int segmentId, [Body] UserRolesModel? body = default);

        /// <summary>
        /// The roleName value expects a single role name, such as "Editor" or "Reader". Requires administrator role.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/system/segments/{segmentId}adduserrole")]
        Task<UserRolesModel> AddUserRoleForSegment(int segmentId, [Body] UserRoleModel? body = default);

        /// <summary>
        /// The roleName value expects a single role name, such as "Editor" or "Reader". Requires administrator role.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/system/segments/{segmentId}removeuserrole")]
        Task<UserRolesModel> RemoveUserRoleForSegment(int segmentId, [Body] UserRoleModel? body = default);

        /// <summary>
        /// Requires APIManageUsers permission.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/users")]
        Task<ICollection<UserSegmentRolesModel>> GetUsers();

        /// <summary>
        /// Provision a user account without login credentials. The provisioned account will be a Single Sign On (SSO) account. This endpoint may be used to synchronize SAML user accounts with an external system. The segmentRoles field may be omitted to provision a user without roles. Requires APIManageUsers permission.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/system/usersprovision")]
        Task<UserSegmentRolesModel> ProvisionUser([Body] UserSegmentRolesModel? body = default);

        /// <summary>
        /// Requires APIManageUsers permission.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/users/{username}")]
        Task<UserSegmentRolesModel> GetUser(string username);

        /// <summary>
        /// Update first name, last name and/or roles. The fields firstName, lastName or segmentRoles may be omitted to keep the current value. Requires APIManageUsers permission.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/system/users/{username}")]
        Task<UserSegmentRolesModel> UpdateUser(string username, [Body] UserSegmentRolesModel? body = default);

        /// <summary>
        /// Requires APIManageUsers permission.
        /// </summary>
        [Delete("/api/v1.0.0/system/users/{username}")]
        Task DeleteUser(string username);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/system/environmentcontext")]
        Task<EnvironmentContext> GetEnvironmentContext();
    }

    /// <summary>
    /// Get workarea folders
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.6.0")]
    public partial interface IWorkareaApi
    {
        /// <summary>
        /// The parameter includeCreatedByMe will be ignored if forUsername is set.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/workareafolders")]
        Task<ICollection<WorkareaFolderModel>> WorkareaFolders([Query] bool? includeCreatedByMe = default, [Query] bool? includeShared = default, [Query] string? forUsername = default);

        /// <summary>
        /// The parameter includeCreatedByMe will be ignored if forUsername is set.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/workareafoldertree")]
        Task<ICollection<WorkareaTreeFolderModel>> WorkareaFolderTree([Query] bool? includeCreatedByMe = default, [Query] bool? includeShared = default, [Query] string? forUsername = default);

        /// <summary>
        /// Returns an entity list for any type of workarea
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/workareafolder/{workareaFolderId}/entitylist")]
        Task<EntityListModel> WorkareaQueryResult(string workareaFolderId);

        /// <summary>
        /// Check the description for the /query endpoint on how to constuct a query.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/workareafolder/{workareaFolderId}/query")]
        Task<ICollection<int>> UpdateWorkareaQuery(string workareaFolderId, [Body] QueryModel? body = default);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/v1.0.0/workareafolder/{workareaFolderId}/entityIds")]
        Task<ICollection<int>> WorkareaFolderEntityIds(string workareaFolderId);

        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/workareafolder/{workareaFolderId}/entityIds")]
        Task<ICollection<int>> SetWorkareaFolderEntityIds(string workareaFolderId, [Body] IEnumerable<int>? body = default);

        /// <summary>
        /// It's only possible to alter name and index properties
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Put("/api/v1.0.0/workareafolder/{workareaFolderId}")]
        Task<WorkareaFolderModel> UpdateWorkarea(string workareaFolderId, [Body] WorkareaFolderModel? body = default);

        [Delete("/api/v1.0.0/workareafolder/{workareaFolderId}")]
        Task DeleteWorkarea(string workareaFolderId);

        /// <summary>
        /// Supply either entityIds or query. This determines if the workarea is static or based on a query.
        /// Check the description for the /query endpoint on how to constuct a query.
        /// </summary>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/api/v1.0.0/workareafoldercreatenew")]
        Task<WorkareaFolderModel> CreateWorkarea([Body] WorkareaCreationModel? body = default);
    }


}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace InRiverRestSdk
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Base64FileModel
    {

        [JsonPropertyName("fileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FileName { get; set; }

        [JsonPropertyName("data")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Base64FileModelWithLink
    {

        [JsonPropertyName("fileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FileName { get; set; }

        [JsonPropertyName("data")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Data { get; set; }

        [JsonPropertyName("resourceLink")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ResourceLinkModel ResourceLink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CVLCreationModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("parentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentId { get; set; }

        [JsonPropertyName("dataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataType { get; set; } = "String";

        [JsonPropertyName("customValueList")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CustomValueList { get; set; } = false;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CVLModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("parentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentId { get; set; }

        [JsonPropertyName("dataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CVLValueModel
    {

        [JsonPropertyName("key")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Key { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("parentKey")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentKey { get; set; }

        [JsonPropertyName("deactivated")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Deactivated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Calendar
    {

        [JsonPropertyName("minSupportedDateTime")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset MinSupportedDateTime { get; set; }

        [JsonPropertyName("maxSupportedDateTime")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset MaxSupportedDateTime { get; set; }

        [JsonPropertyName("algorithmType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public CalendarAlgorithmType AlgorithmType { get; set; }

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [JsonPropertyName("eras")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> Eras { get; set; }

        [JsonPropertyName("twoDigitYearMax")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int TwoDigitYearMax { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum CalendarAlgorithmType
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum CalendarWeekRule
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CategoryModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Name { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ChannelMessageModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("method")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Method { get; set; }

        [JsonPropertyName("message")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ChannelQueueMessage Message { get; set; }

        [JsonPropertyName("status")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Status { get; set; }

        [JsonPropertyName("modified")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset Modified { get; set; }

        [JsonPropertyName("added")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset Added { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ChannelPathContentModel
    {

        [JsonPropertyName("entityList")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public EntityListModel EntityList { get; set; }

        [JsonPropertyName("content")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<StructureEntityModel> Content { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ChannelQueueMessage
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? EntityId { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("fields")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Field> Fields { get; set; }

        [JsonPropertyName("link")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DtoLink Link { get; set; }

        [JsonPropertyName("method")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Method { get; set; }

        [JsonPropertyName("xml")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Xml { get; set; }

        [JsonPropertyName("data")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ChannelSummaryModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("displayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayName { get; set; }

        [JsonPropertyName("displayDescription")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayDescription { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("createdDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedDate { get; set; }

        [JsonPropertyName("modifiedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ModifiedDate { get; set; }

        [JsonPropertyName("isPublished")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPublished { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CommentModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("text")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Text { get; set; }

        [JsonPropertyName("author")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Author { get; set; }

        [JsonPropertyName("createdDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedDate { get; set; }

        [JsonPropertyName("formattedCreatedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FormattedCreatedDate { get; set; }

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CompareInfo
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("version")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public SortVersion Version { get; set; }

        [JsonPropertyName("lcid")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Lcid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CompletenessDetailsModel
    {

        [JsonPropertyName("completeness")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Completeness { get; set; }

        [JsonPropertyName("groups")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<CompletenessGroupDetailsModel> Groups { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CompletenessGroupDetailsModel
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("isCompleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCompleted { get; set; }

        [JsonPropertyName("rules")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<CompletenessRuleDetailModel> Rules { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CompletenessRuleDetailModel
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("isCompleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCompleted { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ConnectEventFilterConfigurationModel
    {

        [JsonPropertyName("filterType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FilterType { get; set; }

        [JsonPropertyName("configuration")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> Configuration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ConnectEventFilterTypeModel
    {

        [JsonPropertyName("filterTypeName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FilterTypeName { get; set; }

        [JsonPropertyName("availableFilterValues")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> AvailableFilterValues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ConnectMessageModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("action")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Action { get; set; }

        [JsonPropertyName("status")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Status { get; set; }

        [JsonPropertyName("message")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Message { get; set; }

        [JsonPropertyName("modified")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset Modified { get; set; }

        [JsonPropertyName("added")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset Added { get; set; }

        [JsonPropertyName("username")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Username { get; set; }

        [JsonPropertyName("extensionId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExtensionId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CultureInfo
    {

        [JsonPropertyName("parent")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public CultureInfo Parent { get; set; }

        [JsonPropertyName("lcid")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Lcid { get; set; }

        [JsonPropertyName("keyboardLayoutId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int KeyboardLayoutId { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("ietfLanguageTag")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string IetfLanguageTag { get; set; }

        [JsonPropertyName("displayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayName { get; set; }

        [JsonPropertyName("nativeName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string NativeName { get; set; }

        [JsonPropertyName("englishName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EnglishName { get; set; }

        [JsonPropertyName("twoLetterISOLanguageName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string TwoLetterISOLanguageName { get; set; }

        [JsonPropertyName("threeLetterISOLanguageName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ThreeLetterISOLanguageName { get; set; }

        [JsonPropertyName("threeLetterWindowsLanguageName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ThreeLetterWindowsLanguageName { get; set; }

        [JsonPropertyName("compareInfo")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public CompareInfo CompareInfo { get; set; }

        [JsonPropertyName("textInfo")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public TextInfo TextInfo { get; set; }

        [JsonPropertyName("isNeutralCulture")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsNeutralCulture { get; set; }

        [JsonPropertyName("cultureTypes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public CultureTypes CultureTypes { get; set; }

        [JsonPropertyName("numberFormat")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public NumberFormatInfo NumberFormat { get; set; }

        [JsonPropertyName("dateTimeFormat")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DateTimeFormatInfo DateTimeFormat { get; set; }

        [JsonPropertyName("calendar")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Calendar Calendar { get; set; }

        [JsonPropertyName("optionalCalendars")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Calendar> OptionalCalendars { get; set; }

        [JsonPropertyName("useUserOverride")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UseUserOverride { get; set; }

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum CultureTypes
    {

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _7 = 7,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DataCriterionModel
    {

        [JsonPropertyName("fieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeId { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

        [JsonPropertyName("language")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Language { get; set; }

        [JsonPropertyName("operator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Operator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DateTimeFormatInfo
    {

        [JsonPropertyName("amDesignator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string AmDesignator { get; set; }

        [JsonPropertyName("calendar")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Calendar Calendar { get; set; }

        [JsonPropertyName("dateSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DateSeparator { get; set; }

        [JsonPropertyName("firstDayOfWeek")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DayOfWeek FirstDayOfWeek { get; set; }

        [JsonPropertyName("calendarWeekRule")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public CalendarWeekRule CalendarWeekRule { get; set; }

        [JsonPropertyName("fullDateTimePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullDateTimePattern { get; set; }

        [JsonPropertyName("longDatePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LongDatePattern { get; set; }

        [JsonPropertyName("longTimePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LongTimePattern { get; set; }

        [JsonPropertyName("monthDayPattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string MonthDayPattern { get; set; }

        [JsonPropertyName("pmDesignator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PmDesignator { get; set; }

        [JsonPropertyName("rfC1123Pattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string RfC1123Pattern { get; set; }

        [JsonPropertyName("shortDatePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShortDatePattern { get; set; }

        [JsonPropertyName("shortTimePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShortTimePattern { get; set; }

        [JsonPropertyName("sortableDateTimePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string SortableDateTimePattern { get; set; }

        [JsonPropertyName("timeSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string TimeSeparator { get; set; }

        [JsonPropertyName("universalSortableDateTimePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string UniversalSortableDateTimePattern { get; set; }

        [JsonPropertyName("yearMonthPattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string YearMonthPattern { get; set; }

        [JsonPropertyName("abbreviatedDayNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> AbbreviatedDayNames { get; set; }

        [JsonPropertyName("shortestDayNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> ShortestDayNames { get; set; }

        [JsonPropertyName("dayNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> DayNames { get; set; }

        [JsonPropertyName("abbreviatedMonthNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> AbbreviatedMonthNames { get; set; }

        [JsonPropertyName("monthNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> MonthNames { get; set; }

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [JsonPropertyName("nativeCalendarName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string NativeCalendarName { get; set; }

        [JsonPropertyName("abbreviatedMonthGenitiveNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> AbbreviatedMonthGenitiveNames { get; set; }

        [JsonPropertyName("monthGenitiveNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> MonthGenitiveNames { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum DayOfWeek
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum DigitShapes
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DtoEntity
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("version")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Version { get; set; }

        [JsonPropertyName("changeSet")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ChangeSet { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("locked")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Locked { get; set; }

        [JsonPropertyName("dateCreated")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DateCreated { get; set; }

        [JsonPropertyName("createdBy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedBy { get; set; }

        [JsonPropertyName("modifiedBy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ModifiedBy { get; set; }

        [JsonPropertyName("fieldSetId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldSetId { get; set; }

        [JsonPropertyName("lastModified")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LastModified { get; set; }

        [JsonPropertyName("mainPictureId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? MainPictureId { get; set; }

        [JsonPropertyName("mainPictureUrl")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string MainPictureUrl { get; set; }

        [JsonPropertyName("completeness")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Completeness { get; set; }

        [JsonPropertyName("loadLevel")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public LoadLevel LoadLevel { get; set; }

        [JsonPropertyName("fields")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<DtoField> Fields { get; set; }

        [JsonPropertyName("links")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<DtoLink> Links { get; set; }

        [JsonPropertyName("displayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DtoField DisplayName { get; set; }

        [JsonPropertyName("displayDescription")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DtoField DisplayDescription { get; set; }

        [JsonPropertyName("segment")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DtoSegment Segment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DtoField
    {

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

        [JsonPropertyName("fieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeId { get; set; }

        [JsonPropertyName("dataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataType { get; set; }

        [JsonPropertyName("revision")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Revision { get; set; }

        [JsonPropertyName("lastModified")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LastModified { get; set; }

        [JsonPropertyName("data")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DtoLink
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("linkTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeId { get; set; }

        [JsonPropertyName("source")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DtoEntity Source { get; set; }

        [JsonPropertyName("target")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DtoEntity Target { get; set; }

        [JsonPropertyName("linkEntity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DtoEntity LinkEntity { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("linkTypeIndex")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int LinkTypeIndex { get; set; }

        [JsonPropertyName("inactive")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Inactive { get; set; }

        [JsonPropertyName("lastModified")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset LastModified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class DtoSegment
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntityBundleModel
    {

        [JsonPropertyName("linkTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeId { get; set; }

        [JsonPropertyName("linkIndex")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? LinkIndex { get; set; }

        [JsonPropertyName("summary")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public EntitySummaryModel Summary { get; set; }

        [JsonPropertyName("fields")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<FieldSummaryModel> Fields { get; set; }

        [JsonPropertyName("specification")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SpecificationValueSummaryModel> Specification { get; set; }

        [JsonPropertyName("outbound")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<EntityBundleModel> Outbound { get; set; }

        [JsonPropertyName("inbound")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<EntityBundleModel> Inbound { get; set; }

        [JsonPropertyName("linkEntity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public EntityBundleModel LinkEntity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntityCreationModel
    {

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("fieldSetId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldSetId { get; set; }

        [JsonPropertyName("fieldValues")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<FieldValueModel> FieldValues { get; set; }

        [JsonPropertyName("segmentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? SegmentId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntityDataModel
    {

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

        [JsonPropertyName("linkTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeId { get; set; }

        [JsonPropertyName("linkIndex")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? LinkIndex { get; set; }

        [JsonPropertyName("linkEntity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public EntityDataModel LinkEntity { get; set; }

        [JsonPropertyName("summary")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public EntitySummaryModel Summary { get; set; }

        [JsonPropertyName("fields")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<FieldSummaryModel> Fields { get; set; }

        [JsonPropertyName("fieldValues")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<FieldValueModel> FieldValues { get; set; }

        [JsonPropertyName("specification")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SpecificationValueSummaryModel> Specification { get; set; }

        [JsonPropertyName("specificationValues")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SpecificationValueModel> SpecificationValues { get; set; }

        [JsonPropertyName("media")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> Media { get; set; }

        [JsonPropertyName("mediaDetails")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<MediaInfoModel> MediaDetails { get; set; }

        [JsonPropertyName("inbound")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<EntityDataModel> Inbound { get; set; }

        [JsonPropertyName("outbound")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<EntityDataModel> Outbound { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntityListModel
    {

        [JsonPropertyName("count")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Count { get; set; }

        [JsonPropertyName("entityIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> EntityIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntitySummaryModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("displayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayName { get; set; }

        [JsonPropertyName("displayDescription")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayDescription { get; set; }

        [JsonPropertyName("version")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Version { get; set; }

        [JsonPropertyName("lockedBy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LockedBy { get; set; }

        [JsonPropertyName("createdBy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedBy { get; set; }

        [JsonPropertyName("createdDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedDate { get; set; }

        [JsonPropertyName("formattedCreatedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FormattedCreatedDate { get; set; }

        [JsonPropertyName("modifiedBy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ModifiedBy { get; set; }

        [JsonPropertyName("modifiedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ModifiedDate { get; set; }

        [JsonPropertyName("formattedModifiedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FormattedModifiedDate { get; set; }

        [JsonPropertyName("resourceUrl")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ResourceUrl { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("entityTypeDisplayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeDisplayName { get; set; }

        [JsonPropertyName("completeness")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Completeness { get; set; }

        [JsonPropertyName("fieldSetId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldSetId { get; set; }

        [JsonPropertyName("fieldSetName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldSetName { get; set; }

        [JsonPropertyName("segmentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SegmentId { get; set; }

        [JsonPropertyName("segmentName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string SegmentName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntityTypeCreationModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Name { get; set; }

        [JsonPropertyName("isLinkEntityType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLinkEntityType { get; set; } = false;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntityTypeModelV2
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("fieldTypes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> FieldTypes { get; set; }

        [JsonPropertyName("inboundLinkTypes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> InboundLinkTypes { get; set; }

        [JsonPropertyName("outboundLinkTypes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> OutboundLinkTypes { get; set; }

        [JsonPropertyName("isLinkEntityType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLinkEntityType { get; set; }

        [JsonPropertyName("fieldSetIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> FieldSetIds { get; set; }

        [JsonPropertyName("displayNameFieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayNameFieldTypeId { get; set; }

        [JsonPropertyName("displayDescriptionFieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayDescriptionFieldTypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EntityUpsertDataModel
    {

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("keyFieldTypeIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> KeyFieldTypeIds { get; set; }

        [JsonPropertyName("fieldValues")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ICollection<object>> FieldValues { get; set; }

        [JsonPropertyName("fieldSetOptions")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public SetFieldSetModel FieldSetOptions { get; set; }

        [JsonPropertyName("specificationData")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public SpecificationUpsertModel SpecificationData { get; set; }

        [JsonPropertyName("segment")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Segment { get; set; }

        [JsonPropertyName("segmentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Obsolete]
        public int? SegmentId { get; set; }

        [JsonPropertyName("links")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<LinkedEntitiesUpsertDataModel> Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EnvironmentContext
    {

        [JsonPropertyName("customerSafeName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CustomerSafeName { get; set; }

        [JsonPropertyName("environmentSafeName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EnvironmentSafeName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExeternalUrlFileModel
    {

        [JsonPropertyName("url")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Url { get; set; }

        [JsonPropertyName("overrideUrlFileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string OverrideUrlFileName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExtensionApiKeyModel
    {

        [JsonPropertyName("apiKey")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ApiKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExtensionCreationModel
    {

        [JsonPropertyName("assemblyName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string AssemblyName { get; set; }

        [JsonPropertyName("assemblyType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string AssemblyType { get; set; }

        [JsonPropertyName("extensionId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExtensionId { get; set; }

        [JsonPropertyName("extensionType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExtensionType { get; set; }

        [JsonPropertyName("packageId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int PackageId { get; set; }

        [JsonPropertyName("isEnabled")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExtensionModel
    {

        [JsonPropertyName("extensionId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExtensionId { get; set; }

        [JsonPropertyName("extensionType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExtensionType { get; set; }

        [JsonPropertyName("assemblyName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string AssemblyName { get; set; }

        [JsonPropertyName("assemblyType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string AssemblyType { get; set; }

        [JsonPropertyName("status")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ExtensionStatusModel Status { get; set; }

        [JsonPropertyName("package")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public PackageModel Package { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExtensionSettingModel
    {

        [JsonPropertyName("key")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Key { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExtensionStatusModel
    {

        [JsonPropertyName("isEnabled")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsEnabled { get; set; }

        [JsonPropertyName("isPaused")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPaused { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ExternalUrlFileModelWithLink
    {

        [JsonPropertyName("url")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Url { get; set; }

        [JsonPropertyName("overrideUrlFileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string OverrideUrlFileName { get; set; }

        [JsonPropertyName("resourceLink")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ResourceLinkModel ResourceLink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FetchLinkObjectsModel
    {

        [JsonPropertyName("linkTypeIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeIds { get; set; }

        [JsonPropertyName("objects")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Objects { get; set; }

        [JsonPropertyName("linkEntityObjects")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkEntityObjects { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FetchObjectsModel
    {

        [JsonPropertyName("entityIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> EntityIds { get; set; }

        [JsonPropertyName("objects")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Objects { get; set; }

        [JsonPropertyName("fieldTypeIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeIds { get; set; }

        [JsonPropertyName("inbound")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public FetchLinkObjectsModel Inbound { get; set; }

        [JsonPropertyName("outbound")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public FetchLinkObjectsModel Outbound { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Field
    {

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

        [JsonPropertyName("fieldType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public FieldType FieldType { get; set; }

        [JsonPropertyName("data")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Data { get; set; }

        [JsonPropertyName("revision")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Revision { get; set; }

        [JsonPropertyName("lastModified")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset LastModified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FieldRevisionModel
    {

        [JsonPropertyName("fieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeId { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

        [JsonPropertyName("language")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Language { get; set; }

        [JsonPropertyName("revision")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Revision { get; set; }

        [JsonPropertyName("modifiedBy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ModifiedBy { get; set; }

        [JsonPropertyName("modifiedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ModifiedDate { get; set; }

        [JsonPropertyName("formattedModifiedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FormattedModifiedDate { get; set; }

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FieldSetCreationModel
    {

        [JsonPropertyName("fieldSetId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldSetId { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Description { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("fieldTypeIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> FieldTypeIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FieldSetModel
    {

        [JsonPropertyName("fieldSetId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldSetId { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("fieldTypeIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> FieldTypeIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FieldSummaryModel
    {

        [JsonPropertyName("fieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeId { get; set; }

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

        [JsonPropertyName("fieldTypeDisplayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeDisplayName { get; set; }

        [JsonPropertyName("fieldTypeDescription")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeDescription { get; set; }

        [JsonPropertyName("fieldDataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldDataType { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

        [JsonPropertyName("displayValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object DisplayValue { get; set; }

        [JsonPropertyName("isMultiValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMultiValue { get; set; }

        [JsonPropertyName("isHidden")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHidden { get; set; }

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [JsonPropertyName("isMandatory")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMandatory { get; set; }

        [JsonPropertyName("isUnique")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsUnique { get; set; }

        [JsonPropertyName("isExcludedFromDefaultView")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsExcludedFromDefaultView { get; set; }

        [JsonPropertyName("includedInFieldSets")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> IncludedInFieldSets { get; set; }

        [JsonPropertyName("categoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoryId { get; set; }

        [JsonPropertyName("categoryName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoryName { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("revision")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Revision { get; set; }

        [JsonPropertyName("cvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CvlId { get; set; }

        [JsonPropertyName("parentCvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentCvlId { get; set; }

        [JsonPropertyName("settings")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Settings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FieldType
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public LocaleString Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public LocaleString Description { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("dataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataType { get; set; }

        [JsonPropertyName("mandatory")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Mandatory { get; set; }

        [JsonPropertyName("unique")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Unique { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("categoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoryId { get; set; }

        [JsonPropertyName("defaultValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DefaultValue { get; set; }

        [JsonPropertyName("units")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Unit> Units { get; set; }

        [JsonPropertyName("hidden")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Hidden { get; set; }

        [JsonPropertyName("readOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReadOnly { get; set; }

        [JsonPropertyName("isDisplayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDisplayName { get; set; }

        [JsonPropertyName("isDisplayDescription")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDisplayDescription { get; set; }

        [JsonPropertyName("settings")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Settings { get; set; }

        [JsonPropertyName("excludeFromDefaultView")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ExcludeFromDefaultView { get; set; }

        [JsonPropertyName("cvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CvlId { get; set; }

        [JsonPropertyName("multivalue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Multivalue { get; set; }

        [JsonPropertyName("trackChanges")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TrackChanges { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FieldTypeModelV2
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Name { get; set; }

        [JsonPropertyName("localizedName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LocalizedName { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Description { get; set; }

        [JsonPropertyName("localizedDescription")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LocalizedDescription { get; set; }

        [JsonPropertyName("dataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataType { get; set; }

        [JsonPropertyName("isMultiValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMultiValue { get; set; } = false;

        [JsonPropertyName("isHidden")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHidden { get; set; } = false;

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; } = false;

        [JsonPropertyName("isMandatory")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMandatory { get; set; } = false;

        [JsonPropertyName("isUnique")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsUnique { get; set; } = false;

        [JsonPropertyName("trackChanges")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool TrackChanges { get; set; } = false;

        [JsonPropertyName("defaultValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DefaultValue { get; set; }

        [JsonPropertyName("isExcludedFromDefaultView")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsExcludedFromDefaultView { get; set; } = false;

        [JsonPropertyName("includedInFieldSets")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> IncludedInFieldSets { get; set; }

        [JsonPropertyName("categoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoryId { get; set; } = "General";

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("cvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CvlId { get; set; }

        [JsonPropertyName("parentCvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentCvlId { get; set; }

        [JsonPropertyName("settings")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Settings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FieldValueModel
    {

        [JsonPropertyName("fieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeId { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ImageConfigurationDetailsModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("extension")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Extension { get; set; }

        [JsonPropertyName("outputExtension")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string OutputExtension { get; set; }

        [JsonPropertyName("arguments")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Arguments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class LanguageCreationModel
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class LanguageModel
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("displayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DisplayName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class LinkCriterionModel
    {

        [JsonPropertyName("linkTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeId { get; set; }

        [JsonPropertyName("direction")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Direction { get; set; }

        [JsonPropertyName("linkExists")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LinkExists { get; set; }

        [JsonPropertyName("dataCriteria")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<DataCriterionModel> DataCriteria { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class LinkModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("isActive")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsActive { get; set; }

        [JsonPropertyName("linkTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeId { get; set; }

        [JsonPropertyName("sourceEntityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SourceEntityId { get; set; }

        [JsonPropertyName("targetEntityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int TargetEntityId { get; set; }

        [JsonPropertyName("linkEntityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? LinkEntityId { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Index { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class LinkedEntitiesUpsertDataModel
    {

        [JsonPropertyName("linkTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeId { get; set; }

        [JsonPropertyName("entities")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<EntityUpsertDataModel> Entities { get; set; }

        [JsonPropertyName("linkInsertAction")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkInsertAction { get; set; }

        [JsonPropertyName("linkUpdateAction")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkUpdateAction { get; set; }

        [JsonPropertyName("staleLinkAction")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string StaleLinkAction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum LoadLevel
    {

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class LocaleString
    {

        [JsonPropertyName("languages")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<CultureInfo> Languages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class MapUniqueValuesModel
    {

        [JsonPropertyName("fieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeId { get; set; }

        [JsonPropertyName("uniqueValues")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<object> UniqueValues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class MediaInfoModel
    {

        [JsonPropertyName("fileId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? FileId { get; set; }

        [JsonPropertyName("url")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Url { get; set; }

        [JsonPropertyName("fileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FileName { get; set; }

        [JsonPropertyName("extension")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Extension { get; set; }

        [JsonPropertyName("fileSize")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? FileSize { get; set; }

        [JsonPropertyName("dateCreated")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DateCreated { get; set; }

        [JsonPropertyName("lastModified")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LastModified { get; set; }

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class NumberFormatInfo
    {

        [JsonPropertyName("currencyDecimalDigits")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrencyDecimalDigits { get; set; }

        [JsonPropertyName("currencyDecimalSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CurrencyDecimalSeparator { get; set; }

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [JsonPropertyName("currencyGroupSizes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> CurrencyGroupSizes { get; set; }

        [JsonPropertyName("numberGroupSizes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> NumberGroupSizes { get; set; }

        [JsonPropertyName("percentGroupSizes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> PercentGroupSizes { get; set; }

        [JsonPropertyName("currencyGroupSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CurrencyGroupSeparator { get; set; }

        [JsonPropertyName("currencySymbol")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CurrencySymbol { get; set; }

        [JsonPropertyName("naNSymbol")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string NaNSymbol { get; set; }

        [JsonPropertyName("currencyNegativePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrencyNegativePattern { get; set; }

        [JsonPropertyName("numberNegativePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int NumberNegativePattern { get; set; }

        [JsonPropertyName("percentPositivePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int PercentPositivePattern { get; set; }

        [JsonPropertyName("percentNegativePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int PercentNegativePattern { get; set; }

        [JsonPropertyName("negativeInfinitySymbol")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string NegativeInfinitySymbol { get; set; }

        [JsonPropertyName("negativeSign")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string NegativeSign { get; set; }

        [JsonPropertyName("numberDecimalDigits")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int NumberDecimalDigits { get; set; }

        [JsonPropertyName("numberDecimalSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string NumberDecimalSeparator { get; set; }

        [JsonPropertyName("numberGroupSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string NumberGroupSeparator { get; set; }

        [JsonPropertyName("currencyPositivePattern")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrencyPositivePattern { get; set; }

        [JsonPropertyName("positiveInfinitySymbol")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PositiveInfinitySymbol { get; set; }

        [JsonPropertyName("positiveSign")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PositiveSign { get; set; }

        [JsonPropertyName("percentDecimalDigits")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int PercentDecimalDigits { get; set; }

        [JsonPropertyName("percentDecimalSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PercentDecimalSeparator { get; set; }

        [JsonPropertyName("percentGroupSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PercentGroupSeparator { get; set; }

        [JsonPropertyName("percentSymbol")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PercentSymbol { get; set; }

        [JsonPropertyName("perMilleSymbol")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PerMilleSymbol { get; set; }

        [JsonPropertyName("nativeDigits")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> NativeDigits { get; set; }

        [JsonPropertyName("digitSubstitution")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public DigitShapes DigitSubstitution { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PackageModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("createdDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedDate { get; set; }

        [JsonPropertyName("modifiedDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ModifiedDate { get; set; }

        [JsonPropertyName("fileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FileName { get; set; }

        [JsonPropertyName("version")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Version { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class QueryModel
    {

        [JsonPropertyName("systemCriteria")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SystemCriterionModel> SystemCriteria { get; set; }

        [JsonPropertyName("dataCriteria")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<DataCriterionModel> DataCriteria { get; set; }

        [JsonPropertyName("linkCriterion")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public LinkCriterionModel LinkCriterion { get; set; }

        /// <summary>
        /// Default value is "And". Accepts only "And" and "Or".
        /// </summary>

        [JsonPropertyName("dataCriteriaOperator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataCriteriaOperator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ResourceLinkModel
    {

        [JsonPropertyName("sourceEntityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SourceEntityId { get; set; }

        [JsonPropertyName("linkTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class RestrictedFieldPermissionModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("fieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldTypeId { get; set; }

        [JsonPropertyName("categoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoryId { get; set; }

        [JsonPropertyName("restrictionType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string RestrictionType { get; set; } = "Readonly";

        [JsonPropertyName("roleId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int RoleId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class RoleModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [JsonPropertyName("permissions")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<object> Permissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Segment
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SegmentModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [JsonPropertyName("roles")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<RoleModel> Roles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SegmentRoleNamesModel
    {

        [JsonPropertyName("segmentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SegmentId { get; set; }

        [JsonPropertyName("roleNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> RoleNames { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SetFieldSetModel
    {

        [JsonPropertyName("fieldSetId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FieldSetId { get; set; }

        [JsonPropertyName("wipeOtherFields")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool WipeOtherFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SetSegmentModel
    {

        [JsonPropertyName("segmentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SegmentId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SetSpecificationTemplateModel
    {

        [JsonPropertyName("specificationId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? SpecificationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SortVersion
    {

        [JsonPropertyName("fullVersion")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int FullVersion { get; set; }

        [JsonPropertyName("sortId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid SortId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SpecificationFieldTypeModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, string> Name { get; set; }

        [JsonPropertyName("dataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DataType { get; set; }

        [JsonPropertyName("categoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoryId { get; set; }

        [JsonPropertyName("defaultValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string DefaultValue { get; set; }

        [JsonPropertyName("format")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Format { get; set; }

        [JsonPropertyName("unit")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Unit { get; set; }

        [JsonPropertyName("isDisabled")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDisabled { get; set; }

        [JsonPropertyName("isMultiValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMultiValue { get; set; }

        [JsonPropertyName("isMandatory")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMandatory { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("cvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CvlId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SpecificationUpsertModel
    {

        [JsonPropertyName("specification")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Specification { get; set; }

        [JsonPropertyName("specificationValues")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ICollection<object>> SpecificationValues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SpecificationValueModel
    {

        [JsonPropertyName("specificationFieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string SpecificationFieldTypeId { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SpecificationValueSummaryModel
    {

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

        [JsonPropertyName("additionalData")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string AdditionalData { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("categoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoryId { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

        [JsonPropertyName("displayValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object DisplayValue { get; set; }

        [JsonPropertyName("parentCvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentCvlId { get; set; }

        [JsonPropertyName("cvlId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CvlId { get; set; }

        [JsonPropertyName("isMultiValue")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMultiValue { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("isFormatted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFormatted { get; set; }

        [JsonPropertyName("specificationFieldTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string SpecificationFieldTypeId { get; set; }

        [JsonPropertyName("unit")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Unit { get; set; }

        [JsonPropertyName("specificationDataType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string SpecificationDataType { get; set; }

        [JsonPropertyName("mandatory")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Mandatory { get; set; }

        [JsonPropertyName("isHidden")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHidden { get; set; }

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class StructureEntityModel
    {

        [JsonPropertyName("entityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EntityId { get; set; }

        [JsonPropertyName("entityTypeId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string EntityTypeId { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("sortOrder")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SortOrder { get; set; }

        [JsonPropertyName("path")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Path { get; set; }

        [JsonPropertyName("linkEntityId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? LinkEntityId { get; set; }

        [JsonPropertyName("linkTypeIdFromParent")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LinkTypeIdFromParent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class StructureNode
    {

        [JsonPropertyName("path")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Path { get; set; }

        [JsonPropertyName("nodes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public IDictionary<string, StructureNode> Nodes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SyndicationModel
    {

        [JsonPropertyName("extensionDisplayName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExtensionDisplayName { get; set; }

        [JsonPropertyName("extensionId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExtensionId { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("mappingName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string MappingName { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("outputFormat")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string OutputFormat { get; set; }

        [JsonPropertyName("workareaName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string WorkareaName { get; set; }

        [JsonPropertyName("workareaId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string WorkareaId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SystemCriterionModel
    {

        [JsonPropertyName("type")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Type { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

        [JsonPropertyName("operator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Operator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class TextInfo
    {

        [JsonPropertyName("ansiCodePage")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int AnsiCodePage { get; set; }

        [JsonPropertyName("oemCodePage")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int OemCodePage { get; set; }

        [JsonPropertyName("macCodePage")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int MacCodePage { get; set; }

        [JsonPropertyName("ebcdicCodePage")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int EbcdicCodePage { get; set; }

        [JsonPropertyName("lcid")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Lcid { get; set; }

        [JsonPropertyName("cultureName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CultureName { get; set; }

        [JsonPropertyName("isReadOnly")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsReadOnly { get; set; }

        [JsonPropertyName("listSeparator")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ListSeparator { get; set; }

        [JsonPropertyName("isRightToLeft")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsRightToLeft { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Unit
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public LocaleString Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UpsertResponseModel
    {

        [JsonPropertyName("errorCount")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ErrorCount { get; set; }

        [JsonPropertyName("errors")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ICollection<string>> Errors { get; set; }

        [JsonPropertyName("insertedEntities")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ICollection<object>> InsertedEntities { get; set; }

        [JsonPropertyName("updatedEntities")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ICollection<object>> UpdatedEntities { get; set; }

        [JsonPropertyName("deletedEntities")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ICollection<object>> DeletedEntities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UrlFileModel
    {

        [JsonPropertyName("url")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Url { get; set; }

        [JsonPropertyName("overrideUrlFileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string OverrideUrlFileName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UrlFileModelWithLink
    {

        [JsonPropertyName("url")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Url { get; set; }

        [JsonPropertyName("overrideUrlFileName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string OverrideUrlFileName { get; set; }

        [JsonPropertyName("resourceLink")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ResourceLinkModel ResourceLink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UserRoleModel
    {

        [JsonPropertyName("username")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Username { get; set; }

        [JsonPropertyName("roleName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string RoleName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UserRolesModel
    {

        [JsonPropertyName("username")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Username { get; set; }

        [JsonPropertyName("roleNames")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> RoleNames { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UserSegmentRolesModel
    {

        [JsonPropertyName("username")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Username { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("firstName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FirstName { get; set; }

        [JsonPropertyName("lastName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LastName { get; set; }

        [JsonPropertyName("segmentRoles")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SegmentRoleNamesModel> SegmentRoles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class WorkareaCreationModel
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("isShared")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsShared { get; set; }

        [JsonPropertyName("query")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public QueryModel Query { get; set; }

        [JsonPropertyName("entityIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> EntityIds { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

        [JsonPropertyName("parentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentId { get; set; }

        [JsonPropertyName("username")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Username { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class WorkareaFolderModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("isQuery")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsQuery { get; set; }

        [JsonPropertyName("index")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Index { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class WorkareaTreeFolderModel
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("isQuery")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsQuery { get; set; }

        [JsonPropertyName("folders")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<WorkareaTreeFolderModel> Folders { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604